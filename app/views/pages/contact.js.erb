//var message=<%#=@message%>;
//console.log(message);

//put stations or geograph_locations in second_station selector
var flagFront=<%=@flag_JS%>;
if(flagFront==1){
	var stations=<%=@prathrio%>;
	for (i=0;i<stations.length;i++){
		console.log(stations[i]);
		var secondStationSelect = document.getElementById("second_station");
		secondStationSelect.options[secondStationSelect.options.length] = new Option(stations[i], i);
	
	}
}
else if(flagFront==2){
	var areas=<%=@geograph_area%>;
	for (i=0;i<areas.length;i++){

		var secondAreaSelector = document.getElementById("second_area");
		secondAreaSelector.options[secondAreaSelector.options.length] = new Option(areas[i], i);	
	}
	//remove double elements from selectors
}
removeDoubleElements("second_station");
removeDoubleElements("second_area_selector");

var firstName,secondName;


	statistics.style.visibility='visible';

	var date=<%=@graph_date%>;
	var katanalwsh=<%=@katanalwsh_pinakas%>;
	console.log(katanalwsh);
	console.log(date);
	var series=[];

	var pivot=0;
	firstName=<%=@first_name%>;
	for (i=0;i<katanalwsh.length;i++){
  
		if(katanalwsh[i]!=-1){
			
	            series.push({
	            //date first
	            x:new Date(date[i]).getTime()+7000000,
	            //date last
	            x2:new Date(date[i+1]).getTime()+7000000,
	            //katanalwsh
	            y:katanalwsh[i],
	            partialFill:  katanalwsh[i].toFixed(2),  
	            color:'blue'          
	            });
	         	
	         	//pivot+=2;
	    }             
	}

	var firstTitle=<%=@title_graph%>;
	console.log(firstTitle);
	    //Highcharts.getOptions().colors = ['blue'];    
		Highcharts.chart('statistics', {
			chart: {
			    type: 'xrange',
			    zoomType: 'xy'
			},
			title: {
			    text: firstTitle
			},
			rangeSelector:{
                enabled:true
            },
			xAxis: {
			    type: 'datetime'
		   },
			yAxis: {
				title: {
				    text: 'Κατανάλωση (lt/100 km)',
				    style: {
	                	color: 'black'
	            	}
				},
				reversed: false
			},
			legend:{
				labelFormatter: function () {
			            return firstName;
			    }
		    },
			series: [{
				name: '',
				// pointPadding: 0,
			    // groupPadding: 0,
			    //borderColor: 'gray',
				pointWidth: 20,
				data: series,
				dataLabels: {
				    enabled: true,
				    formatter: function() {
			          var percents = this.point.partialFill;
			          console.log(percents);
			          return percents ? percents  + '' : ''
			      	}
				}
				}]
		});

//second graph at page

var date2=<%=@second_graph%>;	

if(date2.length>1){
	
	secondName=<%=@second_name%>;
	second_graph_div.style.visibility='visible';
	error.style.visibility='hidden';
	var katanalwsh2 = <%=@katanalwsh_pinakas2%>;
	console.log(katanalwsh2);
	var data=[];
	var newSeries=[];
	for (i=0;i<katanalwsh.length;i++){
		var priorDate= new Date(date[i]).getTime()+7000000;
		priorDate= new Date(priorDate);
		var postDate= new Date(date[i+1]).getTime()+7000000;
		postDate= new Date(postDate);   
		if(katanalwsh[i]!=-1){
	            newSeries.push({
	            myData: firstName+ ', Date: '+ priorDate+' - '+postDate,
	            //date first
	            x:new Date(date[i]).getTime()+7000000,
	            //date last
	            x2:new Date(date[i+1]).getTime()+7000000,
	            //katanalwsh
	            y:katanalwsh[i],
	            partialFill:  katanalwsh[i].toFixed(2),   
	            color: 'blue'         
	            });
		         	
		         	//pivot+=2;
	    }

	}
	for (i=0;i<katanalwsh2.length;i++){
		priorDate= new Date(date[i]).getTime()+7000000;
		priorDate= new Date(priorDate);
		postDate= new Date(date[i+1]).getTime()+7000000;
		postDate= new Date(postDate);   
		if(katanalwsh2[i]!=-1){
	            newSeries.push({
	            myData: secondName+', Date: '+ priorDate+' - '+postDate,
	            //date first
	            x:new Date(date2[i]).getTime()+7000000,
	            //date last
	            x2:new Date(date2[i+1]).getTime()+7000000,
	            //katanalwsh
	            y:katanalwsh2[i],
	            partialFill:  katanalwsh2[i].toFixed(2),  
	            color:'red'          
	            });
	         	
	         	//pivot+=2;
	    }             
	}
	/*
	if(katanalwsh2.length>katanalwsh.length){

	}
	else if(katanalwsh.length>katanalwsh2.length){
		console.log("OI PINAKES EXOUN MEGE8OS PRWTOS "+ katanalwsh.length+ " DEYTEROS "+katanalwsh2.length);
		for (i=0;i<katanalwsh.length;i++){
			var pinakas=[];
			if(katanalwsh[i]!=-1){
				pinakas=setDataToArray(date,i,katanalwsh[i],'blue');
                data.push({
                        name: 'haha',
                      	pointWidth: 10,
                        data: pinakas,
                        dataLabels: {
                            enabled: true,
                            formatter: function() {
                              var percents = this.point.partialFill;
                              console.log(percents);
                              return percents ? percents  + '' : ''
                            }
                        }
                });
			}
			if(i<katanalwsh2.length){
				if(katanalwsh2[i]!=-1){
					pinakas=setDataToArray(date2,i,katanalwsh2[i],'red');
                	data.push({
                        name: 'hoho',
                      	pointWidth: 10,
                        data: pinakas,
                        dataLabels: {
                            enabled: true,
                            formatter: function() {
                              var percents = this.point.partialFill;
                              console.log(percents);
                              return percents ? percents  + '' : ''
                            }
                        }
                	});
				}
			}
		}
	}
	else{

	}
		console.log(data);*/
	var secondTitle=<%=@title_graph2%>;
	console.log(secondTitle);
	Highcharts.chart('second_graph_div', {
			chart: {
			    type: 'xrange',
			    zoomType: 'xy'
			},
			title: {
			    text: secondTitle
			},
			rangeSelector:{
                enabled:true
            },
			xAxis: {
			    type: 'datetime'
		   },
			yAxis: {
				title: {
				    text: 'Κατανάλωση (lt/100 km)',
				    style: {
	                	color: 'black'
	            	}
				},
				reversed: false
			},
			legend: {
		        align: 'right',
		        x: -30,
		        verticalAlign: 'top',
		        y: 25,
		        floating: true,
		        backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
		        borderColor: '#CCC',
		        borderWidth: 1,
		        shadow: false,
		        labelFormatter: function () {
		            return secondName;
		        }
		    },
    		tooltip: {
			        formatter: function() {
			          return '<b>' + this.point.myData + '</b>';
			}},
			series: /*data*/[{
				name: '',
				// pointPadding: 0,
			    // groupPadding: 0,
			    //borderColor: 'gray',
				pointWidth: 10,
				data: newSeries,
				dataLabels: {
				    enabled: true,
				    formatter: function() {
			          var percents = this.point.partialFill;
			          console.log(percents);
			          return percents ? percents  + '' : ''
			      	}
				}
				}]
		});
}
else{
		second_graph_div.style.visibility='hidden';
		error.style.visibility='visible';
}

function removeDoubleElements(selectID){	
	var string='#'+selectID+' option';
	var optionValues =[];
	$(string).each(function(){
	   if($.inArray(this.value, optionValues) >-1){
	      $(this).remove()
	   }else{
	      optionValues.push(this.value);
	   }
});
}

function setDataToArray(arrayDate,position,katanalwsh,colourPicker,){
	console.log("EEEEEEEEEEE"+arrayDate+" "+katanalwsh+" "+colourPicker);
	var array=[];
	array.push({
                    //name
                    //name:nameList[i],
                    //date  
                    x:new Date(arrayDate[position]).getTime()+11000000,
                    x2:new Date(arrayDate[position+1]).getTime()+11000000,
                    //katanalwsh
                    y:katanalwsh,
                    partialFill:  katanalwsh.toFixed(2),
                    color: colourPicker              
                    });
	return array;
}